/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codeChallenge30;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test
    public void add(){
        HashTable hashTable = new HashTable();
        hashTable.add("Layla" , 54);
        hashTable.add("Fadi" , 54);
        hashTable.add("Anas" , 54);
        assertEquals(true, hashTable.containsKey("Layla"));
        assertEquals(true, hashTable.containsKey("Fadi"));
        assertEquals(false, hashTable.containsKey("Falah"));
    }

    @Test
    public void get(){
        HashTable hashTable = new HashTable();
        hashTable.add("L" , 152);
        hashTable.add("M" , 63);

        assertEquals(152, hashTable.get("L"));
        assertEquals(63, hashTable.get("M"));
    }

    @Test
    public void contains(){
        HashTable hashTable = new HashTable();
        hashTable.add("Mohammad" , 546);
        hashTable.add("Ali" , 635);

        assertEquals(false , hashTable.containsKey("L"));
        assertEquals(true , hashTable.containsKey("Mohammad"));
        assertEquals(false , hashTable.containsKey("L"));
        assertEquals(true , hashTable.containsKey("Ali"));
    }

    @Test
    public void hash(){
        HashTable hashTable = new HashTable();
        hashTable.add("Loay" , 54);
        hashTable.add("Mera" , 54);
        int hashedKey = Objects.hashCode("Loay");

        assertEquals(hashedKey, hashTable.hashCode("Loay"));
    }

    @Test
    public void repeatedWord(){
        HashTable hashTable = new HashTable();
        String sentence1="It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York...";
        String sentence2 = "Hello world from Jordan";

        assertEquals("summer" , hashTable.repeatedWord(sentence1));
        assertEquals("" , hashTable.repeatedWord(sentence2));

    }

    @Test
    public void treeToArray(){
        Node root = new Node(23);
        root.left = new Node(58);
        root.left.left = new Node(6);
        root.right = new Node(31);
        root.right.right = new Node(71);
        root.left.right = new Node(142);

        BinaryTree tree1 = new BinaryTree(root);

        Node root2 = new Node(18);
        root2.left = new Node(58);
        root2.left.left = new Node(7);
        root2.right = new Node(31);
        root2.right.right = new Node(71);
        root2.left.right = new Node(142);
        BinaryTree tree2 = new BinaryTree(root2);

        ArrayList<String> arrayList= new ArrayList<String>(List.of(new String[]{"58", "142", "31", "71"}));

        assertEquals(arrayList ,App.treeToArrayMethod(tree1,tree2) );

    }

    @Test
    public void hashMapByLeftJoin(){
        LeftJoin leftJoin = new LeftJoin();
        HashMap<String, String> hashMap1= new HashMap<>();
        hashMap1.put("fond" , "enamored");
        hashMap1.put("wrath" , "anger");

        HashMap<String,String> hashMap2= new HashMap<>();
        hashMap2.put("fond" , "Engineer");

        List<String> list = new ArrayList<>();

        list.add("[\"wrath\", \"anger\", NULL]");
        list.add("[\"fond\", \"enamored\", \"Engineer\"]");

        assertEquals(list, leftJoin.hashmapLeftJoin(hashMap1, hashMap2));
    }
}
