/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codeChallenge05;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test public void linkedListInsert(){ // You should change the type of output to (int) for this test
        LinkedList list = new LinkedList();
        list.insert(9);
        int value1 = 9;
        assertEquals(value1, list.insert(9) );
         }

    @Test public void linkedListIncludes(){
        LinkedList list = new LinkedList();
        list.insert(9);
        int value = 8;
        boolean value2= false;
        assertEquals(value2, list.includes(value));
}
    @Test public void linkedListToString(){
        LinkedList list = new LinkedList();
        list.insert(9);
        String value2= "{ 9 } -> NULL";
        assertEquals(value2, list.tostring());

}
    @Test public void append(){ // You should change the type of output to (int) for this test
        LinkedList list = new LinkedList();
        list.append(9);
        int value1 = 9;
        assertEquals(value1, list.append(9));

    }

    @Test public void insertBefore(){
        LinkedList list = new LinkedList();
        list.insert(2);
        list.insert(6);
        assertEquals( "newNode: 12 then: 6" , list.insertBefore(6,12));
    }

    @Test public void insertAfterValue(){
        LinkedList list = new LinkedList();
        list.insert(8);
        list.insert(4);
        assertEquals( "current: 8 then: 12" , list.insertAfterValue(8,12));

    }


    @Test public void kthFromEnd(){
        LinkedList list =new LinkedList();
        list.insert(8);
        list.insert(4);
        list.insert(9);
        list.insert(1);
        list.insert(3);
        assertEquals(null , list.kthFromEnd(6)); // k is greater than the length of the linked list
        assertEquals(null, list.kthFromEnd(5)); // k and the length of the list are the same
        assertEquals(4,list.kthFromEnd(3));
    }
    @Test public void  kthFromEnd2(){
        LinkedList list =new LinkedList();
        list.insert(3);
        assertEquals(null,list.kthFromEnd(2)); // the linked list is of a size 1
    }
}
