/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codeChallenge12;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test public void pushStack(){
        Stack<Integer> stack = new Stack<Integer>();
        assertEquals(java.util.Optional.of( 10 ), java.util.Optional.ofNullable(stack.push(10)));
    }

    @Test public void popStack(){
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(4);
        stack.push(8);
        stack.push(17);
        assertEquals(java.util.Optional.of(17) , java.util.Optional.ofNullable(stack.pop()));
    }

    @Test public void peekStack(){
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(10);
        stack.push(54);
        stack.push(31);
        assertEquals(java.util.Optional.of(31) , java.util.Optional.ofNullable(stack.peek()));
    }

    @Test public void isEmptyStack(){
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(10);
        stack.push(31);
        assertEquals(java.util.Optional.of(false) , java.util.Optional.ofNullable(stack.isEmpty()));
    }

    @Test public void isEmptyStack2(){
        Stack<Integer> stack = new Stack<Integer>();
        //stack.push(2);
        assertEquals( true , stack.isEmpty());
    }

    @Test public void enqueue(){
        Queue<Integer> queue = new Queue<Integer>();
        assertEquals(java.util.Optional.of(10), java.util.Optional.ofNullable(queue.enqueue(10)));
    }

    @Test public void dequeue(){
        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(40);
        queue.enqueue(17);
        queue.enqueue(13);
        queue.enqueue(4);
        assertEquals(java.util.Optional.of(40), java.util.Optional.ofNullable(queue.dequeue()));
    }

    @Test public void peekQueue(){
        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(40);
        queue.enqueue(17);
        queue.enqueue(13);
        queue.enqueue(4);
        assertEquals(java.util.Optional.of(40), java.util.Optional.ofNullable(queue.peek()));
    }

    @Test public void isEmpty(){
        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(40);
        queue.enqueue(17);
        queue.enqueue(13);
        queue.enqueue(4);
        assertEquals(java.util.Optional.of(false), java.util.Optional.ofNullable(queue.isEmpty()));
    }

    @Test public void isEmpty2(){
        Queue<Integer> queue = new Queue<Integer>();
        assertEquals( true , queue.isEmpty());
    }

    @Test public void pseudoQueue(){
        pseudoQueue<Integer> pseudoQueue = new pseudoQueue<Integer>();
        pseudoQueue.enqueue(51);
        pseudoQueue.enqueue(3);
        pseudoQueue.enqueue(4);
        pseudoQueue.enqueue(47);
        assertEquals(java.util.Optional.of(51) , java.util.Optional.ofNullable(pseudoQueue.enqueue(36)));
        assertEquals(java.util.Optional.of(3) , java.util.Optional.ofNullable(pseudoQueue.dequeue()));
    }

    @Test public void animalShelter_enqueue(){
        AnimalShelter animalShelter = new AnimalShelter();
        animalShelter.enqueue(new CatClass("BUIRD"));
        animalShelter.enqueue(new CatClass("Shiraz"));
        animalShelter.enqueue(new DogClass("Komp"));
        assertEquals("{cat_rear= Shiraz, dog_rear= Komp}", animalShelter.toString());

        animalShelter.enqueue(new DogClass("Losy"));
        assertEquals("{cat_rear= Shiraz, dog_rear= Losy}", animalShelter.toString());


    }

    @Test public void animalShelter_dequeue(){
        AnimalShelter animalShelter = new AnimalShelter();
        animalShelter.enqueue(new CatClass("BUIRD"));
        animalShelter.enqueue(new CatClass("Shiraz"));
        animalShelter.enqueue(new DogClass("Komp"));
        animalShelter.enqueue(new DogClass("Remo"));
        animalShelter.enqueue(new DogClass("choa"));

        assertEquals("Komp" , animalShelter.dequeue("dog").toString());
        assertEquals("BUIRD" , animalShelter.dequeue("cat").toString());
        assertEquals(null , animalShelter.dequeue("Bird"));
    }
}
