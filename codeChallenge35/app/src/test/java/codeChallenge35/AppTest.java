/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codeChallenge35;

import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    public void addNewVertex(){
        Graph graph = new Graph();
        Vertex vertex = new Vertex("Ali");

        assertEquals(vertex, graph.addVertex("Ali"));
    }

    @Test
    public void addNewEdge(){
        Graph graph = new Graph();
        graph.addVertex("Osama");
        graph.addVertex("Ali");
        graph.addVertex("Ahmad");
        List<Vertex> list= new ArrayList<>();
        Vertex vertex=new Vertex("Ahmad");
        list.add(vertex);

        assertEquals(list , graph.addEdge("Osama" , "Ahmad") );
    }

    @Test
    public void getAdjVertices(){
        Graph graph = new Graph();
        graph.addVertex("Osama");
        graph.addVertex("Omar");

        Vertex v1 = new Vertex("Osama");
        Vertex v2 = new Vertex("Omar");
       Map<Vertex,  List<Vertex>>  adjVertices = new HashMap<>();

        adjVertices.putIfAbsent(v1, new ArrayList<>());
        adjVertices.putIfAbsent(v2, new ArrayList<>());
//       graph.addEdge("Osama" , "Omar");
//       adjVertices.get(v1).add(v2);
//       adjVertices.get(v2).add(v1);

        assertEquals(adjVertices , graph.getAdjVertices());
    }

    @Test
    public void getNeighbors(){
        Graph graph = new Graph();
        graph.addVertex("Osama");
        graph.addVertex("Omar");

        Vertex v1 = new Vertex("Osama");
        Vertex v2 = new Vertex("Omar");
        Map<Vertex,  List<Vertex>>  adjVertices = new HashMap<>();

        adjVertices.putIfAbsent(v1, new ArrayList<>());
        adjVertices.putIfAbsent(v2, new ArrayList<>());
       graph.addEdge("Osama" , "Omar");

       List<Vertex> list = new ArrayList<>();
       list.add(v2);

        assertEquals(list , graph.getNeighbors(v1));
    }

    @Test
    public void getSize(){
        Graph graph = new Graph();
        graph.addVertex("Osama");
        graph.addVertex("Omar");

        assertEquals( 2, graph.getSize());
    }

    @Test
    public void breadthFirst(){
        Graph graph = new Graph();
        graph.addVertex("Jawad");
        graph.addVertex("Noor");
        graph.addVertex("Areen");
        graph.addVertex("Maram");
        graph.addVertex("Enas");

        graph.addEdge("Jawad" , "Noor");
        graph.addEdge("Areen" , "Noor");
        graph.addEdge("Enas" , "Jawad");

        Vertex vertex = new Vertex("Jawad");
        Vertex vertex2 = new Vertex("Noor");
        Vertex vertex3 = new Vertex("Enas");
        Vertex vertex4 = new Vertex("Areen");

        List<Vertex> list= new ArrayList<>();
        list.add(vertex);
        list.add(vertex2);
        list.add(vertex3);
        list.add(vertex4);

        assertEquals(list , graph.breadthFirst(vertex));

    }

    @Test
    public void cityTrip(){
        Graph graph = new Graph();

        graph.addVertex("Ibrahim");
        graph.addVertex("Qaed");
        graph.addVertex("Ali");
        graph.addVertex("Ahmad");
        graph.addVertex("Osama");
        graph.addVertex("Omar");
        graph.addEdge("Ibrahim" , "Ali", 15);
        graph.addEdge("Ibrahim" , "Omar", 60 );
        graph.addEdge("Osama" , "Ali", 14);
        graph.addEdge("Omar" , "Ahmad", 30);

        List list= new ArrayList();
        list.add("Ibrahim");
        list.add("Omar");
        list.add("Ahmad");

        assertEquals(90 , graph.citiesTrip(graph, list));

        List list2= new ArrayList();
        list2.add("Osama");
        list2.add("Ahmad");
        assertEquals(0 , graph.citiesTrip(graph , list2));

        List list3= new ArrayList();
        list3.add("Omar");
        list3.add("Ali");
        list3.add("Ibrahim");

        assertEquals(15 , graph.citiesTrip(graph, list3));

        List list4= new ArrayList();
        list4.add("Qaed");

        assertEquals( 0, graph.citiesTrip(graph , list4));
    }
}
